# Generated by Django 3.2.5 on 2021-07-02 12:42

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(blank=True, max_length=100, null=True)),
                ('steamed_list', models.IntegerField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Cafe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('explanation', models.TextField(blank=True)),
                ('reservation_available', models.BooleanField()),
                ('charge_available', models.BooleanField()),
                ('takeout_available', models.BooleanField()),
                ('total_seats', models.SmallIntegerField()),
                ('used_seats', models.SmallIntegerField(null=True)),
                ('unused_seats', models.SmallIntegerField(null=True)),
                ('congestion_status', models.SmallIntegerField(choices=[(0, '여유'), (1, '보통'), (2, '혼잡')], default=0)),
                ('lat', models.FloatField(default=0)),
                ('lng', models.FloatField(default=0)),
                ('thumbnail', models.ImageField(default='#', upload_to='')),
                ('operating_hour', models.TextField(blank=True)),
                ('close_day', models.TextField(blank=True, choices=[('월요일', '월요일'), ('화요일', '화요일'), ('수요일', '수요일'), ('목요일', '목요일'), ('금요일', '금요일'), ('토요일', '토요일'), ('일요일', '일요일')])),
                ('cafe_phone_number', models.CharField(blank=True, max_length=14)),
                ('rating', models.FloatField(blank=True)),
                ('number_of_reivew', models.IntegerField(default=0)),
                ('sum_of_reivew', models.IntegerField(default=0)),
                ('distance', models.FloatField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('writer', models.CharField(max_length=20)),
                ('rating', models.SmallIntegerField(choices=[(1, '1점'), (2, '2점'), (3, '3점'), (4, '4잠'), (5, '5점')], default=5)),
                ('comment', models.TextField()),
                ('cafe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mainapp.cafe')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Queuing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wating_number', models.IntegerField(default=1)),
                ('waiting_team', models.IntegerField(default=0)),
                ('estimated_latency_default', models.IntegerField(default=30)),
                ('estimated_latency', models.IntegerField(default=0)),
                ('cafe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mainapp.cafe')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('price', models.IntegerField()),
                ('reduced_price', models.IntegerField()),
                ('out_of_stock', models.BooleanField()),
                ('cafe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mainapp.cafe')),
            ],
        ),
        migrations.CreateModel(
            name='PersonalReservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wating_number', models.IntegerField(blank=True)),
                ('wating_time', models.DateTimeField(auto_now_add=True)),
                ('queuing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mainapp.queuing')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('representative_image', models.ImageField(upload_to='')),
                ('cafe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mainapp.cafe')),
            ],
        ),
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stamp', models.IntegerField(default=0)),
                ('prizes', models.TextField(default='아메리카노 1잔')),
                ('free_coupon', models.IntegerField(default=0)),
                ('cafe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mainapp.cafe')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
